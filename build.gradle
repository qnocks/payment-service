plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.itransition'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

configurations {
    all*.exclude group:'org.springframework.boot', module:'spring-boot-starter-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'ma.glasnost.orika:orika-core:1.5.4'
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.6'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.4'
    implementation 'commons-codec:commons-codec:1.15'
    implementation "io.jsonwebtoken:jjwt-api:0.11.1"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.1", "io.jsonwebtoken:jjwt-jackson:0.11.1"

    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.32.0'
    testRuntimeOnly 'com.h2database:h2'
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
    }
}

tasks.named('sonarqube').configure {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/itransition/payment/PaymentServiceApplication.class",
                    "com/itransition/payment/**/*Configuration.*",
                    "com/itransition/payment/**/*Dto*",
                    "com/itransition/payment/**/entity/*",
                    "com/itransition/payment/**/types/*",
                    "com/itransition/payment/**/*Exception*",
                    "com/itransition/payment/**/util/*",
                    "com/itransition/payment/**/*Controller.*"
            ])
        }))
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
